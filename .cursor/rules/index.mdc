---
description: 
globs: 
alwaysApply: true
---
# FPL Chat Assistant Project Guidelines

This document outlines the key guidelines and best practices for developing the Fantasy Premier League Chat Assistant application.

## Project Architecture

The application is built with [Next.js 14](mdc:package.json), [Supabase](mdc:package.json), [TypeScript](mdc:tsconfig.json), and [TailwindCSS](mdc:tailwind.config.ts). It follows a modern full-stack architecture with:

- Server-side components in Next.js for improved performance
- Supabase for database, authentication, and storage
- TailwindCSS for styling
- Claude API integration for chat functionality

## File Structure

- [app/](mdc:app) - Next.js app router pages and layouts
- [components/](mdc:components) - Reusable React components
- [lib/](mdc:lib) - Utility functions, API clients, and service integrations
- [scripts/](mdc:scripts) - Database setup and maintenance scripts
- [types/](mdc:types) - TypeScript type definitions

## Code Style Guidelines

1. **Component Naming**: Use kebab-case for component files (e.g., `player-card.tsx`)
2. **Server Components**: Prefer React Server Components by default
3. **Client Components**: Use client components sparingly with the `'use client'` directive only when necessary
4. **Type Safety**: Ensure proper TypeScript types for all components and functions
5. **CSS**: Use TailwindCSS for styling with proper class organization
6. **Error Handling**: Implement proper error boundaries and fallbacks
7. **Loading States**: Always include loading states for data-fetching components

## Database Guidelines

1. Follow the [README.md](mdc:README.md) for database setup instructions
2. Maintain proper Row Level Security (RLS) policies for all tables
3. Use database migrations for schema changes
4. Keep fantasy football data updated with the FPL API

## Development Workflow

1. Refer to [development.md](mdc:development.md) for local setup instructions
2. Use Redis for local development (required for MCP integration)
3. Test authentication flows thoroughly

## API Integration

1. Fantasy Premier League API integration is handled in [lib/fpl-api](mdc:lib/fpl-api)
2. Claude AI integration is managed in [lib/claude-api](mdc:lib/claude-api)
3. Model Context Protocol (MCP) integration is in [lib/mcp-server](mdc:lib/mcp-server)
4. Always handle API rate limits and errors appropriately

## Deployment

1. The application is configured for deployment on Railway
2. Ensure all environment variables are properly set in production