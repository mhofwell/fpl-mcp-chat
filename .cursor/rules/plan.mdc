---
description: 
globs: 
alwaysApply: false
---
App Description: What we're building

This project is aimed at creating an LLM chat interface with Claude connected to the fantasy premiere league API to enable users to ask questions about
teams, fixures, gameweeks, and players to answer questions like: 

"Which players have the best form over the last 5 gameweeks?"
"What's the head-to-head record between Liverpool and Manchester City?"
"Who scored the most bonus points among defenders this season?"
"Which players have risen in price the most since the start of the season?"
"What games are coming up next?"
"Hows Liverpool's form this year?"
"Is San√© better than Ferguston?"

We will not, in this first MVP, implement an integration with the FPL auth system to pull actual fantasy sports teams and submissions from users 
who are playing fantasy sports. This app is about Premiere League league information based on the FPL API. 


Step 1: Set Up Project Infrastructure on Railway

Set up a new Next.js project with Supabase integration on Railway
Configure Redis on Railway
Set up environment variables and secrets
Initialize Git repository and CI/CD pipeline

Step 2: Database and Authentication Setup

Initialize Supabase database with the provided schema
Add user-related tables and relationships
Configure Supabase authentication
Set up database migrations and seed data

Step 3: Core Data Services

Create FPL API service for fetching data
Implement Redis caching layer with appropriate TTLs
Create data synchronization jobs
Build entity extraction utilities for FPL-related queries

Step 4: MCP Server Implementation

Create basic MCP server structure using TypeScript SDK
Implement FPL resources for teams, players, fixtures, gameweeks
Build tools for querying FPL data
Create prompt templates for common FPL questions
Set up Streamable HTTP transport for the server

Step 5: Claude API Integration

Set up Claude API client
Create context generation service
Implement MCP client to connect to the FPL MCP server
Build message handling and response formatting

Step 6: UI Implementation

Create responsive chat interface
Implement message history components
Build login/registration screens
Design user profile management
Create loading states and error handling

Step 7: State Management and Data Flow

Implement Zustand stores for application state
Create server actions for data operations
Build authentication state management
Implement chat history persistence

Step 8: Testing and QA

Create unit tests for core functionality
Implement integration tests for MCP server/client
Set up end-to-end tests for critical user journeys
Perform security testing and performance optimization

Step 9: Deployment and Monitoring

Configure production environment on Railway
Set up monitoring and alerting
Implement logging and error tracking
Deploy final application

Step 10: Documentation and Final Touches

Create user documentation
Document API and code structure
Perform final code review and cleanup
Complete deployment and launch